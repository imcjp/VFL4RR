clear all;
syms d_1 d_2 n T
%% Analysis for role "F2", the source is from the function run & update in class algs.vrg.Party2, the Algorithm is VRG.
f = sym(zeros(1,6));
% [Code from] EncMat encua=(EncMat) msg.getObj();
g = [0 , 0 , 0 , 0 , n , 0];
f = f + g;
% [Code from] EncMat encLa=(EncMat) msg.getObj();
g = [0 , 0 , 0 , 0 , 1 , 0];
f = f + g;
% [Code from] MWNumericArray u=MatComputeHelper.mul(X, w);
g = [0 , n*d_2 , 0 , 0 , 0 , 0];
f = f + g;
% [Code from] MWNumericArray db=MatComputeHelper.subtract(u, y);
g = [0 , n , 0 , 0 , 0 , 0];
f = f + g;
% [Code from] EncMat encdb=new EncMatMultThread(db, pubKey);
g = [n , 0 , 0 , 0 , 0 , 0];
f = f + g;
% [Code from] MWNumericArray Lb=MatComputeHelper.mul(MatComputeHelper.transpose(db), db);
g = [0 , n , 0 , 0 , 0 , 0];
f = f + g;
% [Code from] Lb=MatComputeHelper.add(Lb, MatComputeHelper.mul(algInfo.getLambda(),MatComputeHelper.mul(MatComputeHelper.transpose(w), w)));
g = [0 , d_2+2 , 0 , 0 , 0 , 0];
f = f + g;
% [Code from] EncMat encLab=EncMat.mul2(MatComputeHelper.transpose(MatComputeHelper.mul(2,db)), encua);
g = [n , n , 0 , 0 , 0 , 0];
f = f + g;
% [Code from] EncMat encL=encLa.add(Lb).add(encLab);
g = [2 , 0 , 0 , 0 , 0 , 0];
f = f + g;
% [Code from] sendMessage(algInfo.getParty(1), 21, encdb);
g = [0 , 0 , n , 0 , 0 , 0];
f = f + g;
% [Code from] sendMessage(algInfo.getCoordinator(), 21, encL);
g = [0 , 0 , 1 , 0 , 0 , 0];
f = f + g;
% [Code from] EncMat encd=encdb.add(encua);
g = [n , 0 , 0 , 0 , 0 , 0];
f = f + g;
% [Code from] EncMat encg=EncMat.mul2(Xt, encd).add(MatComputeHelper.mul(algInfo.getLambda(), w));
g = [n*d_2+d_2 , d_2 , 0 , 0 , 0 , 0];
f = f + g;
% [Code from] g=decr(encg);
g = tDecr(d_2,1);
g = g(1,:);
f = f + g;
% [Code from] g=MatComputeHelper.mul(1.0/n, g);
g = [0 , d_2 , 0 , 0 , 0 , 0];
f = f + g;
% [Code from] m=MatComputeHelper.add(MatComputeHelper.mul(beta1, m), MatComputeHelper.mul(1-beta1, g));
g = [0 , 3*d_2 , 0 , 0 , 0 , 0];
f = f + g;
% [Code from] v=MatComputeHelper.add(MatComputeHelper.mul(beta2, v), MatComputeHelper.mul(1-beta2, g2));
g = [0 , 3*d_2 , 0 , 0 , 0 , 0];
f = f + g;
% [Code from] MWNumericArray mHat=MatComputeHelper.mul(m, 1/(1-Math.pow(beta1, iter)));
g = [0 , d_2 , 0 , 0 , 0 , 0];
f = f + g;
% [Code from] MWNumericArray vHat=MatComputeHelper.mul(v, 1/(1-Math.pow(beta2, iter)));
g = [0 , d_2 , 0 , 0 , 0 , 0];
f = f + g;
% [Code from] dtWData[i]=learningRate*mHatData[i]/(Math.sqrt(vHatData[i])+epsilon);
g = [0 , 3*d_2 , 0 , 0 , 0 , 0];
f = f + g;
% [Code from] w=MatComputeHelper.subtract(w, dtW);
g = [0 , d_2 , 0 , 0 , 0 , 0];
f = f + g;
res = f*T;
disp('Analysis for role "F2", the source is from the function run & update in class algs.vrg.Party2, the Algorithm is VRG.');
showRes(res)