==>{"class":"algs.vrg.Party1","function":"run & update","alg":"VRG","role":"F1"}
public void run() {
    Message msg=null;
    MWNumericArray X=X0;
    MWNumericArray Xt = MatComputeHelper.transpose(X);
    MWNumericArray u=MatComputeHelper.mul(X, w);//*2:n*d_1
    EncMat encua=new EncMatMultThread(u, pubKey);//*1:n
    MWNumericArray La=MatComputeHelper.mul(MatComputeHelper.transpose(u), u);//*2:n
    La=MatComputeHelper.add(La, MatComputeHelper.mul(algInfo.getLambda(),MatComputeHelper.mul(MatComputeHelper.transpose(w), w)));//*2:d_1+2
    EncMat encLa=new EncMatMultThread(La, pubKey);//*1:1
    sendMessage(algInfo.getParty(2), 21, encua);//*3:n
    sendMessage(algInfo.getParty(2), 21, encLa);//*3:1
    msg=waitMessage(21);
    EncMat encdb=(EncMat) msg.getObj();//*5:n
    EncMat encd=encdb.add(u);//*1:n
    EncMat encg=EncMat.mul2(Xt, encd).add(MatComputeHelper.mul(algInfo.getLambda(), w));//*1:n*d_1+d_1;2:d_1
    g=decr(encg);//*tDecr(d_1,1)>1
    g=MatComputeHelper.mul(1.0/n, g);//*2:d_1
}
public void update(int iter) {
    double beta1=algInfo.getBeta1();
    double beta2=algInfo.getBeta2();
    double learningRate=algInfo.getLearningRate();
    double epsilon=algInfo.getEpsilon();
    double g2n[]=g.getDoubleData();
    for (int i = 0; i < g2n.length; i++) {
        g2n[i]=g2n[i]*g2n[i];
    }
    MWNumericArray g2 = MatComputeHelper.transpose(new MWNumericArray(g2n, MWClassID.DOUBLE));
    if (m==null) {
        m=MatComputeHelper.mul(1-beta1, g);
    }else {
        m=MatComputeHelper.add(MatComputeHelper.mul(beta1, m), MatComputeHelper.mul(1-beta1, g));//*2:3*d_1
    }
    if (v==null) {
        v=MatComputeHelper.mul(1-beta2, g2);
    }else {
        v=MatComputeHelper.add(MatComputeHelper.mul(beta2, v), MatComputeHelper.mul(1-beta2, g2));//*2:3*d_1
    }
    MWNumericArray mHat=MatComputeHelper.mul(m, 1/(1-Math.pow(beta1, iter)));//*2:d_1
    MWNumericArray vHat=MatComputeHelper.mul(v, 1/(1-Math.pow(beta2, iter)));//*2:d_1
    double [] mHatData=mHat.getDoubleData();
    double [] vHatData=vHat.getDoubleData();
    double [] dtWData=new double[mHatData.length];
    for (int i = 0; i < mHatData.length; i++) {
        dtWData[i]=learningRate*mHatData[i]/(Math.sqrt(vHatData[i])+epsilon);//*2:3*d_1
    }
    MWNumericArray dtW=MatComputeHelper.transpose(new MWNumericArray(dtWData, MWClassID.DOUBLE));
    wBak=w;
    w=MatComputeHelper.subtract(w, dtW);//*2:d_1
    gBak=g;
}
<==